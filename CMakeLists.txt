cmake_minimum_required(VERSION 3.15)
project(LunaLuxEngine)
set(CMAKE_CXX_STANDARD 20)

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        message(ERROR,"must use Visual Studios Compiler to compile on Windows")
    endif()
endif()

include_directories(${PROJECT_SOURCE_DIR}/Includes STATIC IMPORTED)
include_directories(${PROJECT_SOURCE_DIR}/Physics_src STATIC)
include_directories(${PROJECT_SOURCE_DIR}/Core_src STATIC)
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    find_package(Vulkan REQUIRED)
    include_directories(${Vulkan_INCLUDE_DIR})
    link_directories(${Vulkan_LIBRARY})
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    add_compile_definitions(GLEW_STATIC)
    find_package(Vulkan REQUIRED)
    find_package(X11 REQUIRED)
    link_directories(${X11_LIBRARIES})
endif()
add_library(LunaLuxEnginePhysicsLib Physics_src/LunaLuxEnginePhysics.h Physics_src/LunaLuxEnginePhysics.cpp)
add_library(LunaLuxEngineCoreLib Core_src/LunaLuxEngineCore.cpp Core_src/LunaLuxEngineCore.h Core_src/render/IRender.h Core_src/window/Window.h Core_src/window/Window.cpp Core_src/render/Vulkan.cpp Core_src/render/DirectX.cpp Core_src/render/DirectX.h Core_src/render/Vulkan.h)
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    target_link_libraries(LunaLuxEngineCoreLib LunaLuxEnginePhysicsLib ${Vulkan_LIBRARY})
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_link_libraries(LunaLuxEngineCoreLib LunaLuxEnginePhysicsLib ${X11_LIBRARIES} ${Vulkan_LIBRARY})
endif()

add_executable(TestGame Game_src/test.cpp Game_src/Game.cpp Game_src/Game.h)
target_link_libraries(TestGame LunaLuxEngineCoreLib)